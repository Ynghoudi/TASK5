1.Наследование — это один из основных принципов объектно-ориентированного программирования ООП, который позволяет создавать новые классы на основе уже существующих. Новый класс производный или дочерний наследует атрибуты данные и методы функции от 
существующего класса базовый или родительский. Избежание дублирования кода. Создание иерархии классов. Расширяемость. 
2.В C++ существуют три модификатора наследования: public, protected и private. Они определяют уровень доступа, который производный класс получает к членам базового класса.
3.Перегрузка методов: Перегрузка позволяет создавать несколько методов в одном и том же классе с одним и тем же именем, но с разными параметрами. Параметры должны отличаться либо по типу, либо по количеству.Когда используется: Когда нужно предоставить разные 
способы выполнения одной и той же операции, в зависимости от входных данных. Компиляция: Перегрузка разрешается на этапе компиляции. Компилятор выбирает нужный метод на основе типов аргументов, переданных при вызове. Это называется статическим полиморфизмом или 
полиморфизмом времени компиляции. Наследование: Перегруженные методы могут существовать в базовом и производном классах, но это не связано с наследованием напрямую. Класс может перегрузить методы, которые он сам создал, не имея никакого отношения к наследованию.
4.Множественное наследование — это возможность для класса наследовать свойства и методы более чем от одного базового класса. Хотя это может показаться мощным инструментом, оно может приводить к ряду проблем, самая известная из которых — ромбовидное наследование.
Виртуальное наследование Это наиболее распространенное и рекомендуемое решение в C++.Виртуальное наследование гарантирует, что в классе D будет только одна копия общих базовых классов Чтобы использовать виртуальное наследование, нужно указать ключевое слово
virtual при наследовании классов B и C от класса A
5.Абстрактный класс - это класс, который нельзя инстанцировать, то есть нельзя создать объект этого класса напрямую. Абстрактные классы служат в качестве базовых классов для других классов, предоставляя общий интерфейс и структуру, которые должны быть реализованы в производных классах.
