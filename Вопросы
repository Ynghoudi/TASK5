1.Основное отличие композиции и агрегации в ООП это строгость связей между ними, в композиции один объект являеться частью другого объекта и не может сущевствовать без него. А в агрегации один объект содержит другой в качестве своей части.
2.Part - это часть Whole: В коде это значит, что “Part” написано внутри кода “Whole”. Part появляется, когда делают Whole: Когда мы создаете Whole в коде, сразу же создается и его Part. Без Whole Part сами по себе не “существуют”.
Part никому не дают “на сторону”: Код сделан так, что Part нельзя просто взять и использовать в другом месте. Оно навсегда привязано к Whole. Когда Whole удаляют, удаляют и Part: Когда вы “удаляете” Whole из кода (например, он больше не нужен), 
автоматически “удаляются” и все Part.
3.Агрегация более слабый вариант изза различий управлением временем жизни и владении объектов. Но у Агрегации есть приемущество так как объекты Part могут существовать независимо от объектов Whole: Если объект Part имеет смысл вне контекста объекта Whole, 
то агрегация является более подходящим вариантом.Объекты Part могут быть использованы несколькими объектами Whole.Объекты Part создаются и уничтожаются независимо от объектов Whole.Необходима гибкость и слабая связанность: Если требуется гибкость и возможность 
динамически менять составные части объекта Whole, то агрегация является более подходящим вариантом.
4.Мощность отношения в контексте композиции определяет, сколько экземпляров класса Part может быть связано с одним экземпляром класса Whole. Она описывает, сколько “частей” входит в состав “целого”.
5.Однонаправленная ассоциация. Двунаправленная ассоциация. Агрегация. Композиция.
