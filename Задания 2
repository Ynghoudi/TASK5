1 звдвния
#include <iostream>
#include <string>

class Employee {
public:
    Employee(std::string name, double salary) : name(name), salary(salary) {}

    virtual void printInfo() {
        std::cout << "Name: " << name << ", salary: " << salary << std::endl;
    }

protected:
    std::string name;
    double salary;
};

class Manager : public Employee {
public:
    Manager(std::string name, double salary, double bonus) : Employee(name, salary), bonus(bonus) {}

    void printInfo() override {
        std::cout << "Name (Manager): " << name << ", salary: " << salary << ", extra charge: " << bonus << std::endl;
    }

private:
    double bonus;
};

int main() {
    Employee* employee = new Employee("Ivan", 50000);
    Manager* manager = new Manager("Petr", 80000, 20000);

    employee->printInfo(); 

    Employee* employeePtr = manager;
    employeePtr->printInfo(); 

    delete employee;
    delete manager;

    return 0;
}
2 задание
#include <iostream>
#include <string>

class Person {
public:
    Person(std::string n, int a) : name(n), age(a) {}
    virtual void printInfo() { std::cout << "Name: " << name << ", Age: " << age; }
protected:
    std::string name;
    int age;
};

class Student : virtual public Person {
public:
    Student(std::string n, int a, std::string u) : Person(n, a), university(u) {}
protected:
    std::string university;
};

class Worker : virtual public Person {
public:
    Worker(std::string n, int a, std::string c) : Person(n, a), company(c) {}
protected:
    std::string company;
};

class Intern : public Student, public Worker {
public:
    Intern(std::string n, int a, std::string u, std::string c) : Person(n, a), Student(n, a, u), Worker(n, a, c) {}
    void printInfo() override {
        Person::printInfo();
        std::cout << ", Yniver: " << Student::university << ", Company: " << Worker::company << std::endl;
    }
};

int main() {
    Intern ivan("Ivan", 20, "MGY", "Google");
    ivan.printInfo();
    return 0;
}
